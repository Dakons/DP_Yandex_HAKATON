import RPi.GPIO as GPIO

# Отключаем предупреждения (чтобы не было сообщений о том, что пины уже используются)
GPIO.setwarnings(False)

# Устанавливаем режим работы с пинами — используем нумерацию GPIO (Broadcom SOC channel) вместо физической нумерации.
GPIO.setmode(GPIO.BCM)

# Объявляем номера пинов, к которым подключены различные компоненты

BUZZER = 10  # Пин для подключения зуммера

# Мотор управления (левый и правый двигатели)
ENA = 13    # Пин для управления скоростью левого мотора (через ШИМ)
ENB = 20    # Пин для управления скоростью правого мотора (через ШИМ)
IN1 = 16    # Пин для управления направлением левого мотора (вперед/назад)
IN2 = 19    # Пин для управления направлением левого мотора (вперед/назад)
IN3 = 26    # Пин для управления направлением правого мотора (вперед/назад)
IN4 = 21    # Пин для управления направлением правого мотора (вперед/назад)

# Пины ультразвукового датчика для измерения расстояния
ECHO = 4    # Пин для получения сигнала от датчика (эхо-сигнал)
TRIG = 17   # Пин для отправки сигнала триггера (активация датчика)

# Инфракрасные датчики для слежения за линиями или препятствиями
IR_R = 18   # Правый инфракрасный датчик
IR_L = 27   # Левый инфракрасный датчик
IR_M = 22   # Центральный инфракрасный датчик
IRF_R = 25  # Дополнительный правый фронтальный инфракрасный датчик
IRF_L = 1   # Дополнительный левый фронтальный инфракрасный датчик

# Настройка пинов на выход для моторов и их начальное состояние (LOW = выключено)
GPIO.setup(IN1, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(IN2, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(ENA, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(IN3, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(IN4, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(ENB, GPIO.OUT, initial=GPIO.LOW)

# Инициализация ШИМ (широтно-импульсной модуляции) для управления скоростью моторов
ENA_pwm = GPIO.PWM(ENA, 20000)  # ШИМ на частоте 20 кГц для ENA (левый мотор)
ENA_pwm.start(0)                # Запуск ШИМ с начальной скважностью 0% (мотор выключен)
ENA_pwm.ChangeDutyCycle(100)     # Изменение скважности на 100% (мотор на полной скорости)

ENB_pwm = GPIO.PWM(ENB, 20000)  # ШИМ на частоте 20 кГц для ENB (правый мотор)
ENB_pwm.start(0)                # Запуск ШИМ с начальной скважностью 0% (мотор выключен)
ENB_pwm.ChangeDutyCycle(100)     # Изменение скважности на 100% (мотор на полной скорости)

# Настройка инфракрасных датчиков как входов с подтяжкой к питанию (PUD_UP)
GPIO.setup(IR_R, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(IR_L, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(IR_M, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(IRF_R, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(IRF_L, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Настройка пинов ультразвукового датчика
GPIO.setup(TRIG, GPIO.OUT, initial=GPIO.LOW)  # Пин для отправки сигнала (триггер) — на выход
GPIO.setup(ECHO, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Пин для приема сигнала (эхо) — на вход

# Настройка пина для зуммера как выходного (изначально выключен — LOW)
GPIO.setup(BUZZER, GPIO.OUT, initial=GPIO.LOW)

# Функции для управления моторами и датчиками

def digital_write(gpio, status):
    # Функция для записи значения на указанный GPIO-пин (включение/выключение выхода)
    GPIO.output(gpio, status)

def digital_read(gpio):
    # Функция для чтения значения с указанного GPIO-пина (возвращает HIGH или LOW)
    return GPIO.input(gpio)

def ena_pwm(pwm):
    # Функция для управления скоростью левого мотора (изменение скважности ШИМ)
    ENA_pwm.ChangeDutyCycle(pwm)

def enb_pwm(pwm):
    # Функция для управления скоростью правого мотора (изменение скважности ШИМ)
    ENB_pwm.ChangeDutyCycle(pwm)
